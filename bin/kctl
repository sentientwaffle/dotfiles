#!/bin/sh -eu

# "kubectl" wrapper.

c=${0##*/}
usage() {
	cat <<-EOF
	usage:
	  \$ $c cp <file> [pod]
	  Copy a file over from the pod.

	  \$ $c describe
	  \$ $c describe <type>
	  \$ $c describe <type>/<name> [args...]
	  Show details of a resource.

	  \$ $c logs
	  \$ $c logs <kubectl-logs-args...>
	  Pretty-print pod/app logs.

	  \$ $c port
	  \$ $c port <port>
	  \$ $c port <port> <pod>
	  Port-forward to/from the specified (or chosen) pod.
	  By default, use the Node.js debugger port (9229).

	  \$ $c ssh
	  \$ $c ssh <pod>
	  Open a shell on a kubernetes pod for debugging.

	  \$ $c watch
	  \$ $c watch <interval-seconds>
	  Run "kubectl get pods" on a loop.

	Commands are run against the staging cluster by default.

	Immediately following "$c <command>" (but before other arguments),
	the flag "-P" indicates that the command should be run against the
	production cluster.
	EOF
}

_pods() {
	$_kubectl get pods -o name
}

_app_labels() {
	$_kubectl get pods -o \
		jsonpath='{.items[*].metadata.labels.app}' \
		| sed 's/ /\n/g' \
		| sort \
		| uniq
}

k_describe() {
	case "${1:-}" in
		"")  typ=$($_kubectl api-resources -o name | fzy) ;;
		*/*) typ=''          ;; # "type/name"
		*)   typ="$1"; shift ;; # "type"
	esac

	if [ $# -eq 0 ]; then
		name=$($_kubectl get "$typ" -o name | fzy)
	else
		name=$1; shift
	fi
	$_kubectl describe "$name" "$@"
}

k_logs() {
	# Don't fail when there are multiple containers.
	all='--all-containers=true'
	# Don't fail when there are too many log streams (pods).
	max='--max-log-requests=20'

	if [ $# != 0 ]; then
		$_kubectl logs "$all" "$max" "$@" | cl
		exit
	fi

	apps=$(_app_labels)
	pods=$($_kubectl get pods -o name)
	pod_or_app=$(printf '%s%s' "$apps" "$pods" | fzy)

	case "$pod_or_app" in
		pod/*) $_kubectl logs "$all" "$max" -f       "$pod_or_app" | cl ;;
		*)     $_kubectl logs "$all" "$max" -f -lapp="$pod_or_app" | cl ;;
	esac
}

k_port() {
	port=${1:-9229}
	pod=${2:-$(_pods | fzy)}
	set -x
	$_kubectl port-forward "$pod" "$port:$port"
	set +x
}

k_ssh() {
	# TODO it would be nice if this would automatically fall back to /bin/sh when
	# /bin/bash in unavailable.
	pod=${1:-$(_pods | fzy)}
	set -x
	$_kubectl exec --stdin=true --tty=true "$pod" -- /bin/bash
	set +x
}

k_watch() {
	watch -n"${1:-15}" "$_kubectl get pods"
}

k_cp() {
	if [ $# -eq 0 ]; then
		printf 'usage: %s cp <file> [pod]\n' "$c" >&2
		exit 1
	fi
	src=$1
	pod=${2:-$(_pods | fzy)}
	pod=${pod#pod/} # Remove "pod/" prefix.
	dst=$(mktemp -p '/tmp' "$(basename "$src").XXXXXX")
	$_kubectl cp "$pod:$src" "$dst"
	printf '%s\n' "$dst"
}

if ! type 'kubectl' 2>/dev/null >/dev/null; then
	echo 'kubectl is not installed' >&2
	exit 1
elif [ $# -eq 0 ]; then
	usage >&2
	exit 1
fi
cmd=$1; shift

if [ "${1-}" = '-P' ]; then
	_cluster="--cluster=${KUBE_PROD:?}"
	shift
else
	_cluster="--cluster=${KUBE_STAGING:?}"
fi
_kubectl="kubectl $_cluster"

case "$cmd" in
	cp)       k_cp       "$@" ;;
	describe) k_describe "$@" ;;
	logs)     k_logs     "$@" ;;
	port)     k_port     "$@" ;;
	ssh)      k_ssh      "$@" ;;
	watch)    k_watch    "$@" ;;
	*)
		usage >&2
		exit 1
		;;
esac
