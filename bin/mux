#!/usr/bin/env bash

set -euo pipefail

usage() {
	cat <<-EOF
	usage: ${0##*/} <project>

	Set up a tmux window. If no "project" is passed, use fzy to select one.

	Project options:
	  title  <title>              set the window title
	  cd     <directory>          change directories
	  run    <command> [arg1] ..  run a command
	  hsplit [percent]            left/right split
	  vsplit [percent]            top/bottom split
	  pane   <prev|next|{int}>    select a different pane
	  layout <{even,main}-{horizontal,vertical}|tiled>

	Project files are found in "~/Code/mux/**.txt".
	EOF
}

if [[ -z ${1:-} ]]; then
	project=$(_complete_files.sh ~/Code/mux txt | fzy)
elif [[ $1 == '-h' || $1 == '--help' || $1 == 'help' ]]; then
	usage >&2
	exit 1
else
	project=$1
fi

tmux_split() {
	if [[ -z $2 ]]; then
		tmux split-window "$1" -c '#{pane_current_path}'
	else
		tmux split-window "$1" -c '#{pane_current_path}' -p "$2"
	fi
}

tmux_pane() {
	case $project in
		next) local t=':.+' ;;
		prev) local t=':.-' ;;
		*)    local t="$1"  ;;
	esac
	tmux select-pane -t "$t"
}

while read -ra args; do
	cmd=${args[0]}
	arg=${args[*]:1}
	case $cmd in
		'#') ;; # ignore comments
		title)  tmux rename-window "$arg" ;;
		hsplit) tmux_split -h "$arg" ;;
		vsplit) tmux_split -v "$arg" ;;
		layout) tmux select-layout "$arg" ;;
		pane)   tmux_pane "$arg" ;;
		run)    tmux send-keys "$arg" C-m ;;
		cd)
			# cd and send-keys so that pane_current_path works.
			cd "${arg/#\~/$HOME}"
			tmux send-keys "cd $arg" C-m ;;
		*)
			echo "Unknown project option: \"$cmd\"" >&2
			exit 1 ;;
	esac
done < "$HOME/Code/mux/${project}.txt"
