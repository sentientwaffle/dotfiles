#!/bin/sh -eu

dir=${NNM_DIR:?}
arch=$(uname -m)
case "$arch" in
	x86_64) arch='x64' ;;
	i686)   arch='x86' ;;
	*)      ;;
esac

usage() {
	cat <<-EOF
	usage: ${0##*/} <command> [arguments]

	Juggle multiple Node.js builds.

	commands:
	  list
	  use       <version>
	  install   <version>
	  uninstall <version>
	EOF
}

usage_node_dir() {
	cat <<-EOF
	Set the \$NNM_DIR env variable, and add:

	  export NNM_DIR="\$HOME/Code/node"
	  export PATH="\$NNM_DIR/current/bin:\$PATH"

	to your ~/.bashrc
	EOF
}

file_to_version() {
	printf "%s" "$1" | cut -d'-' -f2
}

version_to_dir() {
	echo "$dir/node-v$1-linux-$arch"
}

cmd_list() {
	current=$(readlink "$dir/current")
	[ -n "$current" ] \
		&& current=$(basename "$current")
	for path in "$dir"/*; do
		test -e "$path" || continue
		file=${path##*/}
		[ "$file" = 'current' ] && continue
		if [ "$file" = "$current" ]; then
			echo "* $(file_to_version "$file")"
		else
			echo "  $(file_to_version "$file")"
		fi
	done
}

cmd_use() {
	file=$(version_to_dir "$1")
	if [ -d "$file" ]; then
		rm -f "$dir/current"
		ln -s "$file" "$dir/current"
	else
		echo "v$1 is not installed" >&2
		exit 1
	fi
}

cmd_install() {
	if [ -f "$(version_to_dir "$1")" ]; then
		echo 'already installed'
		exit
	fi
	tar="$dir/node-v${1}.tar.gz"
	curl -o "$tar" "https://nodejs.org/dist/v$1/node-v$1-linux-${arch}.tar.gz"
	tar -xzf "$tar" -C "$dir"
	rm "$tar"
	echo "v$1 installed"
}

cmd_uninstall() {
	vdir=$(version_to_dir "$1")
	if [ ! -d "$vdir" ]; then
		echo 'already uninstalled'
		exit
	fi
	rm -rf "$vdir"
	echo "v$1 uninstalled"
}

if [ "$arch" != 'x86' ] && [ "$arch" != 'x64' ]; then
	echo 'error identifying arch' >&2
	exit 1
fi

if [ -z "$dir" ]; then
	usage_node_dir >&2
	exit 1
fi

command=${1:-}
version=${2:-}
version=${version##v}

fail() {
	usage >&2
	exit 1
}

test_version() {
	if [ -z "$version" ]; then
		fail
	fi
}

case "$command" in
	list|ls)      cmd_list ;;
	use|u)        test_version && cmd_use       "$version" ;;
	install|i)    test_version && cmd_install   "$version" ;;
	uninstall|rm) test_version && cmd_uninstall "$version" ;;
	*)            fail ;;
esac
